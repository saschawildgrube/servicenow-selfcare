<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_selfcare.ExecuteLogScan</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>ExecuteLogScan</name>
        <script><![CDATA[function ExecuteLogScan()
{
	var Clone = x_snc_devtools.Clone;
	var RenderValue = x_snc_devtools.RenderValue;
	var RunScriptInGlobalScope = x_snc_devtools.RunScriptInGlobalScope;
	var GlideRecordQuery = x_snc_devtools.GlideRecordQuery;
	var GlideRecordInsert = x_snc_devtools.GlideRecordInsert;
	var RenderDateTime = x_snc_devtools.RenderDateTime;
	var GetKeys = x_snc_devtools.GetKeys;
	var GetStringValue = x_snc_devtools.GetStringValue;
	var GetHash = x_snc_devtools.GetHash;
	var IsValidSysId = x_snc_devtools.IsValidSysId;
	
	function Log(strText)
	{
		x_snc_selfcare.Log('ExecuteLogScan: '+strText);
	}
	function Debug(strText)
	{
		//x_snc_selfcare.Debug('ExecuteLogScan: '+strText);
	}
	function MakeLogPatternHash(vLogRecord)
	{
		var strInput = '';
		strInput += GetStringValue(vLogRecord.level);
		strInput += GetStringValue(vLogRecord.source);
		strInput += GetStringValue(vLogRecord.message);
		return GetHash(strInput);
	}

	var aExceptions = [
		'"referrerpolicy" is not defined',
		'devstudio_config.xml'
		];
	
	function ContainsException(strMessage)
	{
		for (var nException = 0; nException < aExceptions.length; nException++)
		{
			if (strMessage.indexOf(aExceptions[nException]) != -1)
			{
				return true;
			}
		}
		return false;
	}
	
	Debug('START');
	
	// 1. Scan the evaluator log
	var patterns = {};
	var grSysLog = new GlideRecord('syslog');
	grSysLog.addEncodedQuery('sys_created_on>javascript:gs.beginningOfLast30Minutes()^source=Evaluator');
	grSysLog.orderByDesc('sys_created_on');
	GlideRecordQuery(grSysLog);
	while (grSysLog.next())
	{
		var strMessage = GetStringValue(grSysLog.message);
		
		if (ContainsException(strMessage) == false)
		{
			var strPatternHash = MakeLogPatternHash(grSysLog);
			patterns[strPatternHash] = Clone(grSysLog);
		}
	}

	// 2. Create incidents
	var aPatternHash = GetKeys(patterns);
	for (var nPattern = 0; nPattern < aPatternHash.length; nPattern++)
	{
		var strPatternHash = aPatternHash[nPattern];
		var grIncident = new GlideRecord('incident');
		grIncident.addQuery('x_snc_selfcare_pattern_hash','=',strPatternHash);
		grIncident.query();
		if (grIncident.next() == false)
		{
			var pattern = patterns[strPatternHash];
			var grIncident = new GlideRecord('incident');
			grIncident.initialize();
			grIncident.caller_id = gs.getUserID();
			var strAssignmentGroupSysId = gs.getProperty('x_snc_selfcare.assignment_group');
			if (IsValidSysId(strAssignmentGroupSysId) == false)
			{
				strAssignmentGroupSysId = '';
			}
			grIncident.assignment_group = strAssignmentGroupSysId;
			grIncident.impact = '2';
			grIncident.urgency = '2';
			grIncident.x_snc_selfcare_pattern_hash = strPatternHash;
			grIncident.short_description = 'SelfCare: Evaluator error detected.';
			grIncident.description = 
				"An error has been logged by the evaluator. This incident has been auto-generated by the SelfCare app, which scans the syslog table for evaluator errors. All evaluator errors indicate that a script did not run properly and the instance is not acting as expected. While such an event may be expected in dev environments, it is unacceptable in production.\n"
				+"_________________\n"
				+pattern['message']+"\n"
				+"_________________\n"
				+x_snc_devtools.GetInstanceRecordURL('syslog',pattern.sys_id)+"\n";
			GlideRecordInsert(grIncident);
			Log('Added new incident for pattern hash "'+strPatternHash+'":\n'+RenderValue(grIncident,true));

		}
		else
		{
			Debug('Incident '+grIncident.number+' with pattern hash "'+strPatternHash+'" already exists. Do nothing.');
		}
	}
	
	Debug('END');
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-05-27 15:47:13</sys_created_on>
        <sys_id>dc17277adb5cfc103c6c09c2ba96195f</sys_id>
        <sys_mod_count>44</sys_mod_count>
        <sys_name>ExecuteLogScan</sys_name>
        <sys_package display_value="SelfCare WORK IN PROGRESS" source="x_snc_selfcare">55f06f5fdb336090bc44d844ca961971</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="SelfCare WORK IN PROGRESS">55f06f5fdb336090bc44d844ca961971</sys_scope>
        <sys_update_name>sys_script_include_dc17277adb5cfc103c6c09c2ba96195f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-09-09 08:43:30</sys_updated_on>
    </sys_script_include>
</record_update>
